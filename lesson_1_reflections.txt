How did viewing a diff between two versions of a file help you see the bug that was introduced?
Diff shows where changes have been made to a new file compared to the old one and from there it was easy to work out which line had the typo.

How could having access to the entire history of a file make you a more efficient programmer in the long term?
You are able to revisit old versions of that file and see where changes were made for a specific purpose, for example, refactoring code.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
Pros: 	You can evaluate the commit to see whether it is a logical point in the code changes to warrant an addition version of the file.
		You can associate a message to the commit giving valuable insite into what the change was made for, for example, "Fixed typo's" will tell the person viewing the changes exactly what it is they are looking for, rather than looking for any number of reasons for what that specific change could be.

Cons:	Automatically saving a document will allow the user to retrieve work that may get lost through system down-time such as a powercut or a system crash, which 		could not be achieved if the work had not been commited as a new version.
		If the code being written became unmanageable, then the user could revert back to an earlier saved version, which could not be done unless the work was commited to a new version first.
		You can run the "diff" command on two saved versions of the document, whereas you would have to commit the new version first before be able to assess the changes made between the two versions.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file seperately?
When you are working in the Git version control system, you are likely to have multiple files that all interconnect to one another, and any changes that need to be made are likely to affect multiple files, especially when working on web-based documents like HTML files, which will normally need changes performed in at least one file but most likely across multiple files. These changes would represent a logical point at which a new version commit across multiple files would be needed as opposed to an individual save on each individual file.

How can you use the commands git log and git diff to view the history of files?
First you need to cd into the directory you would like to compare files. Once in the appropriate directory, type: git log, to list all the version commits that have been made on those files/repo's. Find the commit id for the particular commit you are interested in, "q" out of the log, and type: git diff , followed by the commit id, then the commit id of the version you would like to compare it to with a space seperating the two id's. This will list all the changes made between the two versions, including how many lines were changed as well as what was changed on those lines.

How might using version control make you more confident to make changes that could break something?
You are free to make changes as you wish knowing that there are previous versions that you can revert back to in case any problems arise. Being able to switch between versions at any time not only gives the assurance that any problems introduced in the current file/s you are working on, are easily located using the diff operation, as well as being able to try and easily change any problems that may arise.

Now that you have your workspace set up, what do you want to try using Git for?
Version control for my websites, as well as game code.