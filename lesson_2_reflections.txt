How is the staging area different from the working directory and the repository? What value do you think it offers?
The staging area is different from the working directory because the files added to the staging area would of already been worked on and waiting to be committed. It is also different from the repository because the repo would contain files that have been changed and committed with the neccesary files altered as intended. The changes that need to made to one file may affect others and therefore these multiple files will need to be committed at the same time. If you change a CSS file, then it probably changes the HTML file too, so rather than 2 seperate commits - one for the CSS file, and one for the HTML file - you can add all the affected files to the staging area and make a single commit with a message that is related to the overall changes made as a whole.

How can you use the staging area to make sure you have one commit per logical change?
You can use the commands "git diff" without any arguments to check the differences between the working directory and the staging area. Once the files are staged, you can run the command "git diff --staged" to find the differences between the staged files compared to the files in the repo.

What are some situations when branches would be helpful in keeping your history organised? How would branches help?
If you wanted to add an experimental feature to an application without affecting the code for that main application, branches allow you to diverge away from the master branch to create your own branch that can contain all of the master branches functionality (in the code), apply the experimental feature to the new branch, but the original master branch remains unchanged. You can merge this new branch into the master branch if and when you decide to at any point.

How do the diagrams help you visualise the branch structure?
Without a diagram to refer to, complex tree structures would become unmanageable. If you had many branches coming off the master in different commits then how would you find unreachable commits? Diagrams are invaluable at giving you and anybody collaborating with you a visual of the project being worked on and helps everyone to know exactly where they are and what they are working on (or what stage they are working on).

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
When two branches are merged together, the changes made on both branches are consolidated into one branch that takes all the additions and subtractions in the files where possible. Git can use the parent commits of each branch to determine what has been changed in which files and combine them into a single branch. It is represented in the diagram to show the merged branches converging into one to show which branches where merged. All the commits from both branches still remain and are now ordered as per their timestamp.

